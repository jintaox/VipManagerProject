package com.jintao.vipmanager.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jintao.vipmanager.database.bean.DbVipUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "vip_user_info".
*/
public class DbVipUserInfoDao extends AbstractDao<DbVipUserInfo, Long> {

    public static final String TABLENAME = "vip_user_info";

    /**
     * Properties of entity DbVipUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "user_name");
        public final static Property UserSex = new Property(2, String.class, "userSex", false, "user_sex");
        public final static Property PhoneNumber = new Property(3, String.class, "phoneNumber", false, "phone_number");
        public final static Property Uid = new Property(4, int.class, "uid", false, "uid");
        public final static Property ConsumeNumber = new Property(5, int.class, "consumeNumber", false, "consume_number");
        public final static Property LastAmount = new Property(6, float.class, "lastAmount", false, "last_amount");
        public final static Property TotalIntegral = new Property(7, float.class, "totalIntegral", false, "total_integral");
        public final static Property UserIntegral = new Property(8, float.class, "userIntegral", false, "user_integral");
        public final static Property TotalAmount = new Property(9, float.class, "totalAmount", false, "total_amount");
        public final static Property CurrentAmount = new Property(10, float.class, "currentAmount", false, "current_amount");
        public final static Property ConsumeTime = new Property(11, long.class, "consumeTime", false, "consume_time");
        public final static Property RegisterTime = new Property(12, String.class, "registerTime", false, "register_time");
    }


    public DbVipUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DbVipUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"vip_user_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"user_name\" TEXT," + // 1: userName
                "\"user_sex\" TEXT," + // 2: userSex
                "\"phone_number\" TEXT," + // 3: phoneNumber
                "\"uid\" INTEGER NOT NULL ," + // 4: uid
                "\"consume_number\" INTEGER NOT NULL ," + // 5: consumeNumber
                "\"last_amount\" REAL NOT NULL ," + // 6: lastAmount
                "\"total_integral\" REAL NOT NULL ," + // 7: totalIntegral
                "\"user_integral\" REAL NOT NULL ," + // 8: userIntegral
                "\"total_amount\" REAL NOT NULL ," + // 9: totalAmount
                "\"current_amount\" REAL NOT NULL ," + // 10: currentAmount
                "\"consume_time\" INTEGER NOT NULL ," + // 11: consumeTime
                "\"register_time\" TEXT);"); // 12: registerTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"vip_user_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbVipUserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(3, userSex);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(4, phoneNumber);
        }
        stmt.bindLong(5, entity.getUid());
        stmt.bindLong(6, entity.getConsumeNumber());
        stmt.bindDouble(7, entity.getLastAmount());
        stmt.bindDouble(8, entity.getTotalIntegral());
        stmt.bindDouble(9, entity.getUserIntegral());
        stmt.bindDouble(10, entity.getTotalAmount());
        stmt.bindDouble(11, entity.getCurrentAmount());
        stmt.bindLong(12, entity.getConsumeTime());
 
        String registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindString(13, registerTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbVipUserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(3, userSex);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(4, phoneNumber);
        }
        stmt.bindLong(5, entity.getUid());
        stmt.bindLong(6, entity.getConsumeNumber());
        stmt.bindDouble(7, entity.getLastAmount());
        stmt.bindDouble(8, entity.getTotalIntegral());
        stmt.bindDouble(9, entity.getUserIntegral());
        stmt.bindDouble(10, entity.getTotalAmount());
        stmt.bindDouble(11, entity.getCurrentAmount());
        stmt.bindLong(12, entity.getConsumeTime());
 
        String registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindString(13, registerTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbVipUserInfo readEntity(Cursor cursor, int offset) {
        DbVipUserInfo entity = new DbVipUserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userSex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phoneNumber
            cursor.getInt(offset + 4), // uid
            cursor.getInt(offset + 5), // consumeNumber
            cursor.getFloat(offset + 6), // lastAmount
            cursor.getFloat(offset + 7), // totalIntegral
            cursor.getFloat(offset + 8), // userIntegral
            cursor.getFloat(offset + 9), // totalAmount
            cursor.getFloat(offset + 10), // currentAmount
            cursor.getLong(offset + 11), // consumeTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // registerTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbVipUserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoneNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUid(cursor.getInt(offset + 4));
        entity.setConsumeNumber(cursor.getInt(offset + 5));
        entity.setLastAmount(cursor.getFloat(offset + 6));
        entity.setTotalIntegral(cursor.getFloat(offset + 7));
        entity.setUserIntegral(cursor.getFloat(offset + 8));
        entity.setTotalAmount(cursor.getFloat(offset + 9));
        entity.setCurrentAmount(cursor.getFloat(offset + 10));
        entity.setConsumeTime(cursor.getLong(offset + 11));
        entity.setRegisterTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbVipUserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbVipUserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbVipUserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
